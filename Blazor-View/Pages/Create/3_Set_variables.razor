@page "/create/set-variables"
@using ExerciseEngine;
@inject AppState appState

<Creation_Header/>

<MudGrid Class="mt-2 mb-2" Justify="Justify.FlexStart">
@{
    index = -1;
    foreach(Bindable_NotPolymorphic_Variable v in appState.Variables) {
        index++;
        int captured = index;
            <MudItem xs=6>
                <MudPaper >
                    <MudItem xs=12 Class="pa-3">
                        <MudGrid>
                            <MudItem xs=8>
                                <MudTextField T="string" Label="Name" @bind-Value="v.name"/>
                            </MudItem>
                            <MudItem xs=2>
                                <MudButton Variant="Variant.Filled" @onclick="() => RemoveVariable(captured)" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudItem> 
                                        
                    <MudRadioGroup T="SetRange" @bind-SelectedOption="v.setRange" Required="true" RequiredError="Choosing set or range is required!">
                        <MudRadio Option="@SetRange.Range" Disabled="v.dataType == DataType.Operator">Range</MudRadio>
                        <MudRadio Option="@SetRange.Set">Set</MudRadio>
                    </MudRadioGroup>
                    <MudRadioGroup T="DataType" @bind-SelectedOption="v.dataType" Required="true" RequiredError="Choosing data type is required!">
                        <MudRadio Option="@DataType.Int">int</MudRadio>
                        <MudRadio Option="@DataType.Double">double</MudRadio>
                                
                        <MudRadio Option="@DataType.Operator" Disabled="v.setRange == SetRange.Range">Operator</MudRadio> 
                        <MudRadio Option="@DataType.Int" Disabled="true" onmouseover="DisplayStringDisabledReason">string</MudRadio>
                    </MudRadioGroup>

                    <MudItem xs=12 Class="pa-4">
                    <MudGrid>
                    @{
                        if(v.setRange == SetRange.Set) {
                            <!-- this part will be tricky! How do I !efficiently! manage the corespondence betwen: "not split string as list" -- "List of T" where T is from { int, double, Operator }   -->
                            <MudItem xs="12">
                                <MudTextField T="string" Label="Elements to be parsed from string" @bind-Value="v.elements" />
                            </MudItem>
                        } else if(v.setRange == SetRange.Range) {
                            if(v.dataType == DataType.Operator)
                                throw new Exception("Operator variable cannot be defined as range!");
                            <MudItem xs="3">
                                <MudText>Min:</MudText>
                            </MudItem>
                            <MudItem xs="8">
                                        
                            @if(v.dataType == DataType.Int) { <MudInput T="int" Label="Min" @bind-Value="v.intMin"></MudInput> }                
                            @if(v.dataType == DataType.Double) { <MudInput T="double" Label="Min" @bind-Value="v.doubleMin"></MudInput> }
                                        
                            </MudItem>
                            <MudItem xs="3">
                                <MudText>Max:</MudText>
                            </MudItem>
                            <MudItem xs="8">

                            @if(v.dataType == DataType.Int) {<MudInput T="int" Label="Max" @bind-Value="v.intMax"></MudInput>}           
                            @if(v.dataType == DataType.Double) {<MudInput T="double" Label="Max" @bind-Value="v.doubleMax"></MudInput>}

                            </MudItem>
                            <MudItem xs="3">
                                <MudText>Increment:</MudText>
                            </MudItem>
                            <MudItem xs="8">

                            @if(v.dataType == DataType.Int) { <MudInput T="double" Label="Increment" @bind-Value="v.doubleIncrement"></MudInput>}          
                            @if(v.dataType == DataType.Double) { <MudInput T="double" Label="Increment" @bind-Value="v.doubleIncrement"></MudInput> }
                                                       
                            </MudItem>
                        } else {
                            throw new Exception("New set range enum has been defined and must be refelect in web UI!");
                        }  
                    }
                </MudGrid>
            </MudItem>                
        </MudPaper>
    </MudItem>
    }

    <MudItem xs=6>
        <MudItem xs="8">
        <MudButton FullWidth="true" @onclick="AddNewVariable" Variant="Variant.Filled" Color="Color.Tertiary" EndIcon="@Icons.Material.Filled.Send">Add new Variable</MudButton>
        </MudItem>
    </MudItem>
}

</MudGrid>
<MudButton Variant="Variant.Filled" Color="Color.Warning" StartIcon="@Icons.Filled.KeyboardReturn" Href="create/confirm-metadata">Return to metadata</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Tertiary" Class="ml-auto" EndIcon="@Icons.Material.Filled.Send" Href="create/confirm-variables">Continue</MudButton>

@code {
    int index = -1;

    protected override void OnParametersSet() {
        base.OnParametersSet();
        appState.CreationPhase = 3; 
    }

    void AddNewVariable() {
        Console.WriteLine("new variable has been added");
    }

    void RemoveVariable(int index) {
        Console.WriteLine($"variable with index {index} is being removed!");
    }
}
