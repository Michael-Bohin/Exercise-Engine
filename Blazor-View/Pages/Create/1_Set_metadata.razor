@page "/create/set-metadata"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ExerciseEngine;
@inject AppState appState

<Creation_Header/>

<MudGrid Class="mt-4">
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <!-- select initial language and exercise type : -->
                <MudSelect @bind-Value="appState.InitialLanguage" Label="Initial language" OpenIcon="@Icons.Material.Filled.Language" AdornmentColor="Color.Tertiary" Class="mt-1">
                    @foreach (Language language in Enum.GetValues(typeof(Language))) {
                        <MudSelectItem Value="@language">@appState.EnumToEnglish(language)</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect @bind-Value="appState.ExerciseType" Label="Exercise type" OpenIcon="@Icons.Material.Filled.CallSplit" AdornmentColor="Color.Primary" Class="mt-1">
                    @foreach (ExerciseType eType in Enum.GetValues(typeof(ExerciseType))) {
                        <MudSelectItem Value="@eType">@eType</MudSelectItem>
                    }
                </MudSelect>
                <!-- Title & description: -->
                <MudTextField T="string" Label="Title" OpenIcon="@Icons.Filled.Title" Required="true" RequiredError="Title of exercise is required!" @bind-Text="appState.Title" Class="mt-1"/>
                <MudTextField T="string" Label="Description" Required="true" RequiredError="Description of exercise is required!" @bind-Text="appState.Description" Class="mt-1"/>
                
                <!-- Topices, grades & thumbnail generation: -->
                <MudSelect  T="string" Label="Topics" MultiSelection="true" Required="true" RequiredError="At least one topic is required!" @bind-SelectedValues="appState.topicOptions" Class="mt-1">
                   @foreach (var topic in topics) { <MudSelectItem T="string" Value="@topic">@topic</MudSelectItem> }
                </MudSelect>
                <MudSelect  T="string" Label="Grades" MultiSelection="true" Required="true" RequiredError="At least one grade is required!" @bind-SelectedValues="appState.gradeOptions" Class="mt-1">
                   @foreach (var grade in grades) { <MudSelectItem T="string" Value="@grade" >@grade</MudSelectItem> }
                </MudSelect>

                <MudSwitch T="bool" Label="Auto generate thumbnail" Color="Color.Tertiary" @bind-Checked="@appState.AutoGenerateThumbnail" Class="mt-3"  />
                <MudTextField T="string" Label="Thumbnail path" Disabled="@(appState.AutoGenerateThumbnail)" Margin="Margin.Dense" Required="@(!appState.AutoGenerateThumbnail)" RequiredError="On false autogen filename of thumbnail is required!" @bind-Text="appState.ThumbnailFileName"/>

                <!-- continue: -->
                <div class="d-flex align-center justify-space-between mt-3">
                    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Disabled="@(!success)" Class="ml-auto" EndIcon="@Icons.Material.Filled.Send" Href="create/confirm-metadata">Continue</MudButton>
                </div>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Reset())">Reset fields</MudButton>
        </MudPaper>
       
    </MudItem>
    <MudItem xs="12" sm="5">
         
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
            @foreach (var error in errors) {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    bool success;
    string[] errors = { };
    MudForm? form; // making it nullable decreases VS yelling

    List<string> topics = new(); // filled on initialised override
    List<string> grades = new(); // filled on initialised override

    protected override void OnInitialized() {
        base.OnInitialized();
        foreach(string topic in Enum.GetNames(typeof(Topic))) 
            topics.Add(topic);
        foreach(string grade in Enum.GetNames(typeof(Grade)))
            grades.Add(grade);
    }

    protected override void OnParametersSet() {
        base.OnParametersSet();
        appState.CreationPhase = 1; 
    }
}