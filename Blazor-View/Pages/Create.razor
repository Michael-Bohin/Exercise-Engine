@page "/create"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ExerciseEngine;

<h3>Create new exercise</h3>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <!-- select initial language and exercise type : -->
                <MudSelect @bind-Value="lang" Label="Initial language" OpenIcon="@Icons.Material.Filled.Language" AdornmentColor="Color.Tertiary">
                    @foreach (Language item in Enum.GetValues(typeof(Language))) {
                        <MudSelectItem Value="@item">@dict[item]</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect @bind-Value="exerciseType" Label="Exercise type" OpenIcon="@Icons.Material.Filled.CallSplit" AdornmentColor="Color.Primary">
                    @foreach (ExerciseType item in Enum.GetValues(typeof(ExerciseType))) {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>

                <div class="d-flex mud-width-full align-center mt-8">
                    <MudText Typo="Typo.subtitle1" Class="mr-2">Selected values: </MudText>
                    <MudChip Color="Color.Tertiary">@dict[lang]</MudChip>
                    <MudChip Color="Color.Primary">@exerciseType</MudChip>
                </div>

                <!-- Title & description: -->
                <MudTextField T="string" Label="Title" Required="true" RequiredError="Title of exercise is required!" />
                <MudTextField T="string" Label="Description" Required="true" RequiredError="Description of exercise is required!"/>

                <MudSelect T="string" Label="US States" MultiSelection="true"  @bind-SelectedValues="options">
                    @foreach (var state in states)
                    {
                        <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect  T="Topic" Label="Topics" MultiSelection="true"  @bind-SelectedValues="topicOptions">
                   @foreach (var topic in topics)
                    {
                        <MudSelectItem T="Topic" Value="@topic">@topic</MudSelectItem>
                    }
                </MudSelect>

                <MudGrid Class="mt-6 px-4">
                    
                    <MudItem xs="6">
                        <MudText Typo="Typo.subtitle2">SelectedValues: HashSet&lt;string&gt;</MudText>
                        <MudText Typo="Typo.subtitle2">{</MudText>
                        <MudText Typo="Typo.body2" Class="pl-4">@(string.Join(", ", options.Select(x=>$"\"{x}\"")))</MudText>
                        <MudText Typo="Typo.subtitle2">}</MudText>
                    </MudItem>
                </MudGrid>
                <!-- Topices and grades: -->

                <MudGrid Class="mt-6 px-4">
                    <MudItem  xs="6">
                        <MudText Typo="Typo.subtitle2">Value:</MudText>
                        <MudText Typo="Typo.subtitle2">"</MudText>
                        <MudText Typo="Typo.body2" Class="pl-4">@topicValue</MudText>
                        <MudText Typo="Typo.subtitle2">"</MudText>
                    </MudItem> 
                    <MudItem xs="6">
                        <MudText Typo="Typo.subtitle2">SelectedValues: HashSet&lt;string&gt;</MudText>
                        <MudText Typo="Typo.subtitle2">{</MudText>
                        <MudText Typo="Typo.body2" Class="pl-4">@(string.Join(", ", topicOptions.Select(x=>$"\"{x}\"")))</MudText>
                        <MudText Typo="Typo.subtitle2">}</MudText>
                    </MudItem>
                </MudGrid>

                <!-- account type: -->
                <div class="d-flex">
                    <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
                        <MudRadio Option="@("Personal")">Personal</MudRadio>
                        <MudRadio Option="@("Professional")">Professional</MudRadio>
                    </MudRadioGroup>
                </div>
                <!-- agree and register: -->
                <div class="d-flex align-center justify-space-between">
                    <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
                </div>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
            @foreach (var error in errors) {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {

    private string value { get; set; } = "Nothing selected";
    private IEnumerable<string> options { get; set; } = new HashSet<string>() { "California", "Iowa" };

    private Topic topicValue { get; set; } = Topic.Percentages;
    private IEnumerable<Topic> topicOptions = new HashSet<Topic>();

    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private Topic[] topics = { Topic.Addition, Topic.Arithmetic, Topic.Combinatorics, Topic.Percentages, Topic.Fractions };


    bool success;
    string[] errors = { };
    MudForm? form; // makit it nullable decreases VS yelling

    private Dictionary<Language, string> dict = new() {
        { Language.en, "English" }, 
        { Language.pl, "Polish" }, 
        { Language.cs, "Czech" }, 
        { Language.ua, "Ukrainian"}
    };


    private Language lang { get; set; } = ExerciseEngine.Language.en;
    private ExerciseType exerciseType { get; set; } = ExerciseEngine.ExerciseType.Numerical;


    bool SomeMethod() {
        return success;
    }

}