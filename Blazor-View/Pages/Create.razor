@page "/create"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ExerciseEngine;

<h3>Create new exercise</h3>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <!-- select initial language and exercise type : -->
                <MudSelect @bind-Value="lang" Label="Initial language" OpenIcon="@Icons.Material.Filled.Language" AdornmentColor="Color.Tertiary">
                    @foreach (Language item in Enum.GetValues(typeof(Language))) {
                        <MudSelectItem Value="@item">@dict[item]</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect @bind-Value="exerciseType" Label="Exercise type" OpenIcon="@Icons.Material.Filled.CallSplit" AdornmentColor="Color.Primary">
                    @foreach (ExerciseType item in Enum.GetValues(typeof(ExerciseType))) {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>

                <!-- Title & description & topics & grades: -->
                <MudTextField T="string" Label="Title" Required="true" RequiredError="Title of exercise is required!" />
                <MudTextField T="string" Label="Description" Required="true" RequiredError="Description of exercise is required!"/>
                <MudSelect  T="string" Label="Topics" MultiSelection="true" @bind-SelectedValues="topicOptions">
                   @foreach (var topic in topics) { <MudSelectItem T="string" Value="@topic">@topic</MudSelectItem> }
                </MudSelect>
                <MudSelect  T="string" Label="Grades" MultiSelection="true" @bind-SelectedValues="gradeOptions">
                   @foreach (var grade in grades) { <MudSelectItem T="string" Value="@grade">@grade</MudSelectItem> }
                </MudSelect>

                <MudSwitch T="bool" Label="Auto generate thumbnail" Disabled="true" />

                <!-- Topices and grades: -->

                <div class="d-flex mud-width-full align-center mt-8">
                    <MudText Typo="Typo.subtitle1" Class="mr-2">Selected values: </MudText>
                    <MudChip Color="Color.Tertiary">@dict[lang]</MudChip>
                    <MudChip Color="Color.Primary">@exerciseType</MudChip>
                </div>

                <MudGrid Class="mt-6 px-4">
                    <MudItem xs="6">
                        <MudText Typo="Typo.subtitle2">Selected topics:</MudText>
                        <MudText Typo="Typo.body2" Class="pl-4">@(string.Join(", ", topicOptions.Select(x=>$"\"{x}\"")))</MudText>
                    </MudItem>
                </MudGrid>

                <!-- account type: -->
                <div class="d-flex">
                    <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
                        <MudRadio Option="@("Personal")">Personal</MudRadio>
                        <MudRadio Option="@("Professional")">Professional</MudRadio>
                    </MudRadioGroup>
                </div>
                <!-- agree and register: -->
                <div class="d-flex align-center justify-space-between">
                    <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
                </div>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
            @foreach (var error in errors) {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    protected override void OnInitialized() {
        base.OnInitialized();
        foreach(string topic in Enum.GetNames(typeof(Topic))) 
            topics.Add(topic);
        foreach(string grade in Enum.GetNames(typeof(Grade)))
            grades.Add(grade);
    }

    private IEnumerable<string> topicOptions = new HashSet<string>();
    private List<string> topics = new(); // filled on initialised override

    private IEnumerable<string> gradeOptions = new HashSet<string>();
    private List<string> grades = new(); // filled on initialised override

    bool success;
    string[] errors = { };
    MudForm? form; // makit it nullable decreases VS yelling

    private Dictionary<Language, string> dict = new() {
        { Language.en, "English" }, 
        { Language.pl, "Polish" }, 
        { Language.cs, "Czech" }, 
        { Language.ua, "Ukrainian"}
    };


    private Language lang { get; set; } = ExerciseEngine.Language.en;
    private ExerciseType exerciseType { get; set; } = ExerciseEngine.ExerciseType.Numerical;


    bool SomeMethod() {
        return success;
    }

}